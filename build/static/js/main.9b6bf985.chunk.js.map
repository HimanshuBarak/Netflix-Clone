{"version":3,"sources":["request.js","axios.js","Row.js","Banner.js","Navbar.js","App.js","serviceWorker.js","index.js"],"names":["API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","instance","axios","create","baseURL","Row","title","fetchUrl","isLarge","useState","trailerUrl","seTrailerUrl","movies","setMovies","useEffect","a","get","request","data","results","fetchData","className","map","movie","key","id","onClick","movieTrailer","name","orignal_name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","src","poster_path","alt","videoId","opts","height","width","playerVars","autoplay","Banner","str","n","setMovie","response","Math","floor","random","length","getmovie","style","backgroundSize","backgroundImage","backdrop_path","backgroundPosition","original_name","overview","substr","Navbar","show","handleshow","window","addEventListener","scrollY","removeElementListener","class","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.9b6bf985.chunk.js","sourcesContent":["\r\n//this is the api key\r\nconst API_KEY ='664bb7c8a00f962e8f9f53f820dcca1a';\r\n\r\n\r\n//object containg path /endpoitns for all the different categories\r\n const requests={\r\n    fetchTrending: `trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n}\r\n\r\n// if you make a default export than you don't have to destructure it\r\nexport default requests;\r\n\r\n","import axios from \"axios\";\r\n\r\n\r\n//\r\nconst instance = axios.create({\r\n    baseURL: 'https://api.themoviedb.org/3'\r\n})\r\n\r\n\r\n\r\nexport default instance;\r\n\r\n","import axios from './axios';\r\nimport React,{useState,useEffect} from 'react'\r\nimport movieTrailer from 'movie-trailer';\r\nimport './Row.css'\r\nimport YouTube from 'react-youtube';\r\n\r\n//poster_epath doesnt contain the complete path to the image the poster|_path is appended with th is base url to access the images\r\nconst base_url = 'https://image.tmdb.org/t/p/original/';\r\n\r\n//THE ROW COMPONENT\r\nfunction Row({title,fetchUrl,isLarge}) {\r\n    const [trailerUrl ,seTrailerUrl] = useState('');\r\n\r\n    const [movies,setMovies] = useState([]);\r\n    //A SNIPPET OF CODE WHICH RUNS BASED ON A SPECIFIC CONDITION \r\n    useEffect(() => {\r\n       \r\n        //ASYNC FUNCTION TO GET THE MOVIES DATA\r\n           async function fetchData(){\r\n              //WHAT GETS SEND IS THE = baseURL + fetchUrl  \r\n              const request = await axios.get(fetchUrl);\r\n              //only this part is relevant to us\r\n              setMovies(request.data.results);\r\n              \r\n              return request;\r\n              \r\n        }\r\n        fetchData();\r\n        \r\n    }, [fetchUrl])\r\n    const opts = {\r\n        height: '390',\r\n        width: '100%',\r\n        playerVars: {\r\n          // https://developers.google.com/youtube/player_parameters\r\n          autoplay: 1,\r\n        },\r\n      };\r\n    //WHATEVER IS IN THE BRACKET IS THE DEPENDENCY OF THE USE EFFECT AND  USEFFECT EXECUTES AS MANY AS TIME AS THE DEPENDENCY STATE CHANGES \r\n    const handleClick = (movie)=>{\r\n       if(trailerUrl){\r\n           seTrailerUrl('');\r\n       }else{\r\n           movieTrailer(movie?.name || movie?.title || movie?.orignal_name)\r\n           .then((url)=>{\r\n               const urlParams = new URLSearchParams(new URL(url).search);\r\n               seTrailerUrl(urlParams.get('v'));\r\n           })\r\n           .catch((error)=>console.log(error));\r\n       }\r\n    }\r\n     \r\n    return (\r\n        <div className=\"row\">\r\n          <h2>{title}</h2>\r\n          <div className=\"row__posters\" >\r\n        \r\n           {  // PRINTING THE POSTER/IMAGE OF THE MOVIES\r\n               movies.map(movie => (\r\n                   <img key ={movie.id}\r\n                   onClick={()=>handleClick(movie)} \r\n                   className={`row__poster ${isLarge && \"row__posterlarge\"}`} \r\n                   src={`${base_url}${isLarge?movie.poster_path:movie.poster_path}`} \r\n                   alt={movie.name}     />\r\n               ) )\r\n           }  \r\n            \r\n          </div>\r\n          {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\r\n        </div> \r\n    )\r\n}\r\n\r\nexport default Row;\r\n","import React, { useEffect,useState } from 'react'\r\nimport './Banner.css'\r\nimport axios from './axios'\r\nimport requests from './request'\r\n\r\n\r\nconst base_url = 'https://image.tmdb.org/t/p/original/';\r\n\r\nfunction Banner() {\r\n   const [movie,setMovie] = useState([]);\r\n    useEffect(() => {\r\n            \r\n        async function getmovie(){\r\n            const response = await axios.get(requests.fetchNetflixOriginals);\r\n      setMovie(\r\n        response.data.results[\r\n          Math.floor(Math.random() * (response.data.results.length - 1))\r\n        ]\r\n      );\r\n      return response;\r\n        }\r\n        getmovie();\r\n        \r\n    }, [])\r\n    \r\n    const truncate = (str, n) => {\r\n      return str?.length > n ? str.substr(0, n - 1) + '...' : str;\r\n    };\r\n\r\n    return (\r\n\r\n       \r\n        <div className=\"banner\"\r\n            style={{\r\n                backgroundSize:\"Cover\",\r\n                backgroundImage:`url(${base_url}${movie?.backdrop_path})`,\r\n                backgroundPosition:'center center',\r\n            }}>\r\n            <div className=\"banner__contents\">    \r\n           \r\n            <h1 className=\"banner_title\">\r\n                {movie?.title || movie?.name || movie?.original_name}\r\n            </h1>\r\n             <div className=\"banner_buttons\">\r\n               <button className=\"banner_btn\">Play</button>\r\n               <button className=\"banner_btn\">My List</button>\r\n\r\n             </div>\r\n            <h4  className=\"movie_name\">{truncate(movie.overview,150)}</h4>\r\n            </div>\r\n            <div  className=\"banner__fadeBottom\"   />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Banner;\r\n","import React, { useEffect ,useState} from 'react'\r\nimport './Navbar.css'\r\nfunction Navbar() {\r\n    const [show, handleshow] = useState(false);\r\n    useEffect(() => {\r\n    //we add a scroll eventlistener like when we scroll and the value of scroll along y exceeds 100 we show the black navbar\r\n         window.addEventListener('scroll',()=>{\r\n             if(window.scrollY >100){\r\n                handleshow(true);\r\n             }else handleshow(false);\r\n         })\r\n        return () => {\r\n           window.removeElementListener(\"scroll\");\r\n        }\r\n    }, [])\r\n    return (\r\n        <div className={`navbar ${show && \"add_black\"}`}>\r\n            <img class=\"nav__logo\" src=\"https://upload.wikimedia.org/wikipedia/commons/0/0f/Logo_Netflix.png\" alt=\"Netflix Logo\" />\r\n             \r\n            <img class=\"nav__avatar\" src=\"https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png\" alt=\"Netflix Logo\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar;\r\n","import React from 'react';\nimport requests from './request'\nimport './App.css';\nimport Row from './Row.js'\nimport Banner from './Banner'\nimport NavBar from './Navbar.js'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NavBar />\n      <Banner   />\n      <Row title=\"Trending Now\"  fetchUrl={requests.fetchTrending} isLarge/> {/*WE PASS THE TITLE AND FETCHURL TO THE ROW COMPONENT  */}\n      <Row title=\"Netflix Originals\" fetchUrl={requests.fetchNetflixOriginals}/>\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated}/>\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies}/>\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies}/>\n      <Row title=\"Horror\" fetchUrl={requests.fetchHorrorMovies}/>\n      <Row title=\"Romance\" fetchUrl={requests.fetchRomanceMovies}/>\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}